{"version":3,"file":"static/js/976.7fefe785.chunk.js","mappings":"+QAIMA,EAAY,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACnBC,QAAQC,IAAIF,GACZ,IACMG,EAAWH,EAAKI,KAAI,SAAAC,GAAE,OAC1B,2BACIA,EAAGC,eAAgB,gBAAKC,IAAKC,EAAQC,IAAI,cAC1CJ,EAAGC,eAAgB,gBAAKC,IAJb,kCAI4BF,EAAGC,aAAcG,IAAKJ,EAAGK,QACjE,uBAAIL,EAAGM,iBACP,4CAAeN,EAAGO,eAJXP,EAAGQ,OAOd,OAAO,8BAAGC,QAAQd,EAAKe,UAAW,wBAAKZ,OAGzC,IAEAJ,EAAUiB,aAAe,CACvBhB,KAAM,I,cC6BR,MA5CA,WACE,OAAgCiB,EAAAA,EAAAA,UAAS,CACvCjB,KAAM,GACNkB,SAAS,EACTC,MAAO,OAHT,eAAOC,EAAP,KAAiBC,EAAjB,KAKQR,GAAOS,EAAAA,EAAAA,MAAPT,IAERU,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,2FAChBH,GAAY,SAAAI,GAAI,yBACXA,GADW,IAEdP,SAAS,OAHK,mBAMKQ,EAAAA,EAAAA,IAAeb,GANpB,OAMRc,EANQ,OAQdN,GAAY,SAAAI,GAAI,yBACXA,GADW,IAEdP,SAAS,EACTlB,KAAM2B,EAAK3B,UAXC,gDAcdqB,GAAY,SAAAI,GAAI,yBACXA,GADW,IAEdP,SAAS,EACTC,MAAO,KAAIS,aAjBC,yDAAH,qDAqBfJ,EAAUX,KACT,CAACA,IAEJ,IAAQb,EAAyBoB,EAAzBpB,KAAMkB,EAAmBE,EAAnBF,QAASC,EAAUC,EAAVD,MAEvB,OACE,gCACGD,IAAW,uCACZ,SAAC,EAAD,CAAWlB,KAAMA,IAChBmB,IAAS,uBAAIA,S,iMC3CdU,E,MAAWC,GAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAa,mCAAG,sGACJL,EAASM,IAAI,oBAAqB,CACvDH,OAAQ,CACNI,KAAM,KAHiB,uBACnBT,EADmB,EACnBA,KADmB,kBAOpBA,GAPoB,2CAAH,qDAUbU,EAAc,mCAAG,WAAMxB,GAAN,yFACLgB,EAASM,IAAT,iBAAuBtB,IADlB,uBACpBc,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,sDAKdD,EAAc,mCAAG,WAAMb,GAAN,yFACLgB,EAASM,IAAT,iBAAuBtB,EAAvB,aADK,uBACpBc,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,sDAKdW,EAAiB,mCAAG,WAAMzB,GAAN,yFACRgB,EAASM,IAAT,iBAAuBtB,EAAvB,aADQ,uBACvBc,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,sDAKjBY,EAAgB,mCAAG,WAAMC,GAAN,yFACPX,EAASM,IAAT,gBAA8B,CACnDH,OAAQ,CACNQ,MAAAA,KAH0B,uBACtBb,EADsB,EACtBA,KADsB,kBAMvBA,GANuB,2CAAH,uD","sources":["components/Cast/CastItems/CastItems.jsx","components/Cast/Cast.jsx","shared/services/moviesAPI.js"],"sourcesContent":["import PropTypes from 'prop-types';\n\nimport POSTER from 'images/no-poster.jpg';\n\nconst CastItems = ({ cast }) => {\n  console.log(cast);\n  const IMG_URL = 'https://image.tmdb.org/t/p/w500';\n  const elements = cast.map(el => (\n    <li key={el.id}>\n      {!el.profile_path && <img src={POSTER} alt=\"no poster\" />}\n      {el.profile_path && <img src={IMG_URL + el.profile_path} alt={el.name} />}\n      <p>{el.original_name}</p>\n      <p>Charaсter: {el.character}</p>\n    </li>\n  ));\n  return <>{Boolean(cast.length) && <ul>{elements}</ul>}</>;\n};\n\nexport default CastItems;\n\nCastItems.dafaultProps = {\n  cast: [],\n};\n\nCastItems.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      profile_path: PropTypes.string,\n      name: PropTypes.string.isRequired,\n      original_name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\n\nimport CastItems from './CastItems';\nimport { fetchMovieCast } from 'shared/services/moviesAPI';\n\nfunction Cast() {\n  const [castData, setСastData] = useState({\n    cast: [],\n    loading: false,\n    error: null,\n  });\n  const { id } = useParams();\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      setСastData(prev => ({\n        ...prev,\n        loading: true,\n      }));\n      try {\n        const data = await fetchMovieCast(id);\n\n        setСastData(prev => ({\n          ...prev,\n          loading: false,\n          cast: data.cast,\n        }));\n      } catch (err) {\n        setСastData(prev => ({\n          ...prev,\n          loading: false,\n          error: err.message,\n        }));\n      }\n    };\n    fetchCast(id);\n  }, [id]);\n\n  const { cast, loading, error } = castData;\n\n  return (\n    <>\n      {loading && <p>...Loading</p>}\n      <CastItems cast={cast} />\n      {error && <p>{error}</p>}\n    </>\n  );\n}\n\nexport default Cast;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '473bf57b6e795f74966a4b9785ccc38f',\n  },\n});\n\nexport const fetchTrending = async () => {\n  const { data } = await instance.get('/trending/all/day', {\n    params: {\n      page: 1,\n    },\n  });\n\n  return data;\n};\n\nexport const fetchMovieById = async id => {\n  const { data } = await instance.get(`/movie/${id}`);\n  return data;\n};\n\nexport const fetchMovieCast = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  return data;\n};\n\nexport const fetchMovieReviews = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data;\n};\n\nexport const fechMovieByQuery = async query => {\n  const { data } = await instance.get(`search/movie/`, {\n    params: {\n      query,\n    },\n  });\n  return data;\n};\n"],"names":["CastItems","cast","console","log","elements","map","el","profile_path","src","POSTER","alt","name","original_name","character","id","Boolean","length","dafaultProps","useState","loading","error","castData","setСastData","useParams","useEffect","fetchCast","prev","fetchMovieCast","data","message","instance","axios","baseURL","params","api_key","fetchTrending","get","page","fetchMovieById","fetchMovieReviews","fechMovieByQuery","query"],"sourceRoot":""}